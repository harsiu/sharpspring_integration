<?php

use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
use Drupal\Component\Plugin\Exception\PluginNotFoundException;
use Drupal\Component\Utility\UrlHelper;
use Drupal\Core\Form\BaseFormIdInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\sharpspring_integration\Utility\HelperFunctions;

/**
 * Use this function to find the ID of the webform,
 * then call a function as the form is submitted.
 *
 * @param array $form
 * @param FormStateInterface $form_state
 * @param string $form_id
 *
 * @throws InvalidPluginDefinitionException
 * @throws PluginNotFoundException
 */
function sharpspring_integration_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  $is_admin = \Drupal::service('router.admin_context')->isAdminRoute();

  if ($is_admin) {
    return FALSE;
  }

  $query = \Drupal::entityTypeManager()->getStorage('lead')->load($form_id);

  if (!empty($query)) {
    $form_state->set('sharpspringFormId', $form_id);
    $form['actions']['submit']['#submit'][] = 'sharpspring_integration_webform_submit_handler';
  }
  else {
    $form_object = $form_state->getFormObject();

    if ($form_object instanceof BaseFormIdInterface) {
      $base_form_id = $form_object->getBaseFormId();

      if (!empty($base_form_id) && $base_form_id != $form_id) {
        $query = \Drupal::entityTypeManager()
          ->getStorage('lead')
          ->load($base_form_id);

        if (!empty($query)) {
          $form_state->set('sharpspringFormId', $base_form_id);
          $form['actions']['submit']['#submit'][] = 'sharpspring_integration_webform_submit_handler';
        }
      }
    }
  }
}

/**
 * Function to be called when a webform that exists in sharpspring integration
 * form list is called
 *
 * @param array $form
 * @param FormStateInterface $form_state
 *
 * @return false
 * @throws InvalidPluginDefinitionException
 * @throws PluginNotFoundException
 */
function sharpspring_integration_webform_submit_handler($form, FormStateInterface $form_state) {
  // api config
  $api = \Drupal::entityTypeManager()->getStorage('api')->load('default');
  $utility = new HelperFunctions;

  if (empty($api->accountId) || empty($api->secretKey)) {
    \Drupal::logger('sharpspring_integration')
      ->error("Missing sharpspring settings. Please check your API configuration");
    return FALSE;
  }

  //lead config for submitted form
  $lead_fields = \Drupal::entityTypeManager()->getStorage('lead')
    ->load($form_state->get('sharpspringFormId'));

  /**
   * @param $lead
   *   Array of key values pairs where:
   *   - key is lead field ID from Sharpspring API
   *   - value is submitted form field value for specific lead field ID
   */
  $lead = $utility->get_values($lead_fields, $form_state);
  $account_id = (string) $api->accountId;
  $account_secret = (string) $api->secretKey;
  $query_string = UrlHelper::buildQuery([
    'accountID' => $account_id,
    'secretKey' => $account_secret,
  ]);
  $url = "https://api.sharpspring.com/pubapi/v1/?" . $query_string;

  $create_response = $utility->send_lead($url, 'createLeads', $lead);

  if ($create_response == 301) {
    $utility->send_lead($url, 'updateLeads', $lead);
  }

  return TRUE;
}